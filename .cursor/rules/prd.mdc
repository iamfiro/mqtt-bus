---
alwaysApply: true
---
# üöå Route-Differentiated Smart Bus Stop Bell System ‚Äì PRD (Product Requirements Document)

‚∏ª

1Ô∏è‚É£ Product Overview

üéØ Objective

To resolve frequent complaints about buses passing by stops without stopping, digital exclusion issues, and notification delays by developing a smart bus stop bell system that:
	‚Ä¢	Provides route-differentiated, clearly visible physical buttons
	‚Ä¢	Allows anyone to use it intuitively without smartphones
	‚Ä¢	Ensures arrival notifications within 1 second
	‚Ä¢	Delivers an open, extensible data platform

‚∏ª

2Ô∏è‚É£ Problem Definition

Current Issues:
	‚Ä¢	Mixed Route Display: Drivers cannot quickly distinguish which route was called.
	‚Ä¢	Smartphone Dependency: Elderly and foreign passengers cannot easily use the system.
	‚Ä¢	GPS Notification Delay: Alerts often arrive too late, causing complaints.

In 2024, more than 80,000 no-stop complaints were reported every month.

‚∏ª

3Ô∏è‚É£ Key Features

üöè Bus Stop Call Device
	‚Ä¢	Color-coded, clearly labeled physical buttons for each route
	‚Ä¢	Weatherproof (IP54), impact-resistant housing with low-temperature battery
	‚Ä¢	LED indicators for call and cancellation status

üöå Bus Notification Device
	‚Ä¢	Direct CAN-Bus power connection
	‚Ä¢	High-intensity red/green LED bar
	‚Ä¢	85 dB Piezo buzzer for audible alerts
	‚Ä¢	Clear visibility in daylight and noisy environments

üåê Central Platform
	‚Ä¢	AWS cloud container-based architecture
	‚Ä¢	Real-time handling of thousands of calls per second
	‚Ä¢	Average end-to-end delay ‚â§1 second
	‚Ä¢	Redis and Kafka for processing and storage
	‚Ä¢	APIs: GTFS-Realtime feed, REST, WebSocket

‚∏ª

4Ô∏è‚É£ System Architecture & Technical Stack

üîó IoT Side

Component	Details
GNSS Module	GPS location and speed (NMEA)
MCU	ESP32 / STM32 (MQTT publishing)
Button/LED	Physical interface (IP54 waterproof)

‚òÅÔ∏è Server Side

Layer	Technology
Data Ingestion	Node.js with mqtt package
Buffering	Apache Kafka (kafkajs)
ETA Calculation	Node.js + Redis TimeSeries, haversine-distance, kalman-filter
API & Feed	Express.js, Socket.io, gtfs-realtime-bindings
Monitoring & Alerts	Prometheus, Grafana, Slack Webhook


‚∏ª

5Ô∏è‚É£ Data Flow

[Bus Stop Call Device]
       ‚îÇ MQTT
       ‚ñº
[MQTT Broker]
       ‚îÇ
       ‚ñº
[Kafka Topic (gps)]
       ‚îÇ
       ‚ñº
[ETA Calculation Engine]
       ‚îÇ
   ‚îú‚îÄ‚îÄ Redis (TimeSeries storage)
   ‚îú‚îÄ‚îÄ GTFS-Realtime API
   ‚îî‚îÄ‚îÄ WebSocket Live Push


‚∏ª

6Ô∏è‚É£ Functional Details

Area	Description
Call Creation	Button press sends a JSON MQTT message including the route code
Data Buffering	Kafka persists messages for real-time or delayed consumption
Distance Calculation	Haversine formula computes distance in meters
Speed Filtering	Kalman Filter reduces GPS noise
ETA Calculation	Distance √∑ Smoothed Speed
Data Storage	Redis TimeSeries keeps last 30s records
API Access	REST (/arrival/:stopId), GTFS (/gtfs), WebSocket (/socket)
Monitoring	Prometheus-based delay/error monitoring


‚∏ª

Deliverables

Item	Description
Bus Stop Call Device	IP54 weatherproof, low-temperature design, button & LED prototype
Bus Notification Device	High-intensity LED & buzzer hardware
Central Platform	AWS-based real-time processing backend
Dashboard	Visual statistics of calls, cancellations, stops
Presentation Materials	CAD models, slides, video clips, demonstration GIFs


11Ô∏è‚É£ Success Criteria
	‚Ä¢	End-to-end call-to-alert delay ‚â§1 second
	‚Ä¢	80%+ user satisfaction for route clarity and accessibility
	‚Ä¢	Verified feasibility through field testing and expert review